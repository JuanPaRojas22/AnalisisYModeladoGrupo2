-- Crear la base de datos
CREATE DATABASE GestionEmpleados;

-- Usar la base de datos
USE GestionEmpleados;

-- Crear tabla Departamento
CREATE TABLE Departamento (
    id_departamento INT PRIMARY KEY AUTO_INCREMENT,
    Nombre VARCHAR(255),
    descripcion VARCHAR(255),
    fechacreacion DATE,
    usuariocreacion VARCHAR(255),
    fechamodificacion DATE,
    usuariomodificacion VARCHAR(255)
);

-- Crear tabla Estado
CREATE TABLE Estado (
    id_estado INT PRIMARY KEY AUTO_INCREMENT,
    descripcion VARCHAR(255)
);

-- Crear tabla Tipo_vacacion
CREATE TABLE Tipo_vacacion (
    id_tipo_vacacion INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(255)
);

-- Crear tabla Rol
CREATE TABLE Rol (
    id_rol INT PRIMARY KEY AUTO_INCREMENT,
    nombre VARCHAR(255)
);

-- Crear tabla Usuario
CREATE TABLE Usuario (
    id_usuario INT PRIMARY KEY AUTO_INCREMENT,
    id_departamento INT,
    id_rol INT,
    nombre VARCHAR(255),
    apellido VARCHAR(255),
    fecha_nacimiento DATE,
    fecha_ingreso DATE,
    cargo VARCHAR(255),
    correo_electronico VARCHAR(255),
    username VARCHAR(40),
    password VARCHAR(40),
    numero_telefonico VARCHAR(20),
    direccion_imagen VARCHAR(255),
    sexo VARCHAR(10),
    estado_civil VARCHAR(20),
    fechacreacion DATE,
    usuariocreacion VARCHAR(255),
    fechamodificacion DATE,
    usuariomodificacion VARCHAR(255),
    CONSTRAINT fk_usuario_departamento FOREIGN KEY (id_departamento) REFERENCES Departamento(id_departamento),
    CONSTRAINT fk_usuario_rol FOREIGN KEY (id_rol) REFERENCES Rol(id_rol)
);

-- Crear tabla Historial_vacaciones
CREATE TABLE Historial_vacaciones (
    id_historial INT PRIMARY KEY AUTO_INCREMENT,
    id_usuario INT,
    FechaInicio DATE,
    FechaFin DATE,
    DiasTomados INT,
    Razon VARCHAR(255),
    CONSTRAINT fk_historial_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario)
);


-- Crear tabla vacacion
CREATE TABLE vacacion (
    id_vacacion INT PRIMARY KEY AUTO_INCREMENT,
    id_tipo_vacacion INT,
    razon VARCHAR(255),
    diasTomado INT,
    fecha_inicio DATE,
    observaciones VARCHAR(255),
    id_departamento INT,
    id_estado INT,
    id_usuario INT,
    id_historial INT,
    fechacreacion DATE,
    usuariocreacion VARCHAR(255),
    fechamodificacion DATE,
    usuariomodificacion VARCHAR(255),
    CONSTRAINT fk_vacacion_tipo_vacacion FOREIGN KEY (id_tipo_vacacion) REFERENCES Tipo_vacacion(id_tipo_vacacion),
    CONSTRAINT fk_vacacion_departamento FOREIGN KEY (id_departamento) REFERENCES Departamento(id_departamento),
    CONSTRAINT fk_vacacion_estado FOREIGN KEY (id_estado) REFERENCES Estado(id_estado),
    CONSTRAINT fk_vacacion_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario),
    CONSTRAINT fk_vacacion_historial FOREIGN KEY (id_historial) REFERENCES Historial_vacaciones(id_historial)
);


-- Crear tabla Dias_Feriados
CREATE TABLE Dias_Feriados (
    id_fecha INT PRIMARY KEY AUTO_INCREMENT,
    nombre_feriado VARCHAR(255),
    fecha DATE,
    tipo_feriado VARCHAR(255),
    id_tipo_vacacion INT,
    id_vacacion INT,
    CONSTRAINT fk_dias_tipo_vacacion FOREIGN KEY (id_tipo_vacacion) REFERENCES Tipo_vacacion(id_tipo_vacacion),
    CONSTRAINT fk_dias_vacacion FOREIGN KEY (id_vacacion) REFERENCES vacacion(id_vacacion)
);
-- Crear tabla eliminacion_usuario
CREATE TABLE eliminacion_usuario (
    id_usuario INT PRIMARY KEY,
    fecha_retiro DATE,
    motivo_retiro VARCHAR(255),
    id_estado INT,
    CONSTRAINT fk_eliminacion_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario),
    CONSTRAINT fk_eliminacion_estado FOREIGN KEY (id_estado) REFERENCES Estado(id_estado)
);

-- Crear tabla Deducciones
CREATE TABLE Deducciones (
    id_deduccion INT PRIMARY KEY AUTO_INCREMENT,
    id_usuario INT,
    razon VARCHAR(255),
    deudor VARCHAR(255),
    concepto VARCHAR(255),
    lugar VARCHAR(255),
    deuda_total DOUBLE,
    aportes DOUBLE,
    saldo_pendiente DOUBLE,
    saldo_pendiente_dolares DOUBLE,
    fechacreacion DATE,
    usuariocreacion VARCHAR(255),
    fechamodificacion DATE,
    usuariomodificacion VARCHAR(255),
    CONSTRAINT fk_deducciones_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario)
);

-- Crear tabla Permisos_Laborales
CREATE TABLE Permisos_Laborales (
    id_beneficio INT PRIMARY KEY AUTO_INCREMENT,
    id_usuario INT,
    tipo_permiso VARCHAR(255),
    fecha_inicio DATE,
    fecha_fin DATE,
    dias_permiso INT,
    motivo VARCHAR(255),
    fechacreacion DATE,
    usuariocreacion VARCHAR(255),
    fechamodificacion DATE,
    usuariomodificacion VARCHAR(255),
    CONSTRAINT fk_permisos_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario)
);

-- Crear tabla Bonos
CREATE TABLE Bonos (
    id_bono INT PRIMARY KEY AUTO_INCREMENT,
    id_usuario INT,
    razon VARCHAR(255),
    monto_total VARCHAR(255),
    fecha_aplicacion DATE,
    fechacreacion DATE,
    usuariocreacion VARCHAR(255),
    fechamodificacion DATE,
    usuariomodificacion VARCHAR(255),
    CONSTRAINT fk_bonos_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario)
);

-- Crear tabla Horas_Extra
CREATE TABLE Horas_Extra (
    id_horas_extra INT PRIMARY KEY AUTO_INCREMENT,
    id_usuario INT,
    fecha DATE,
    horas INT,
    monto_pago DECIMAL(10, 2),
    fechacreacion DATE,
    usuariocreacion VARCHAR(255),
    fechamodificacion DATE,
    usuariomodificacion VARCHAR(255),
    CONSTRAINT fk_horas_extra_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario)
);

-- Crear tabla Beneficios
CREATE TABLE Beneficios (
    id_beneficio INT PRIMARY KEY AUTO_INCREMENT,
    id_usuario INT,
    razon VARCHAR(255),
    monto DOUBLE,
    identificacion_medismart VARCHAR(255),
    valor_plan_total DOUBLE,
    aporte_patrono DOUBLE,
    beneficiarios DOUBLE,
    fechacreacion DATE,
    usuariocreacion VARCHAR(255),
    fechamodificacion DATE,
    usuariomodificacion VARCHAR(255),
    CONSTRAINT fk_beneficios_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario)
);

-- Crear tabla Planilla
CREATE TABLE Planilla (
    id_planilla INT PRIMARY KEY AUTO_INCREMENT,
    id_usuario INT,
    id_horas_extra INT,
    id_deduccion INT,
    id_bono INT,
    id_beneficio INT,
    salario_base DOUBLE,
    tipo_quincena VARCHAR(255),
    salario_neto DOUBLE,
    mes VARCHAR(255),
    anio INT,
    fechacreacion DATE,
    usuariocreacion VARCHAR(255),
    fechamodificacion DATE,
    usuariomodificacion VARCHAR(255),
    CONSTRAINT fk_planilla_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario),
    CONSTRAINT fk_planilla_horas_extra FOREIGN KEY (id_horas_extra) REFERENCES Horas_Extra(id_horas_extra),
    CONSTRAINT fk_planilla_deduccion FOREIGN KEY (id_deduccion) REFERENCES Deducciones(id_deduccion),
    CONSTRAINT fk_planilla_bono FOREIGN KEY (id_bono) REFERENCES Bonos(id_bono),
    CONSTRAINT fk_planilla_beneficio FOREIGN KEY (id_beneficio) REFERENCES Beneficios(id_beneficio)
);

-- MODIFICACIONES DE LA BASE DE DATOS
ALTER TABLE usuario ADD Estado int DEFAULT 1;

ALTER TABLE Usuario
ADD CONSTRAINT fk_usuario_estado
FOREIGN KEY (id_estado)
REFERENCES Estado(id_estado);

-- NUEVA MODIFICACION 
ALTER TABLE Usuario MODIFY COLUMN direccion_imagen LONGBLOB;


//AÃ±adir columna retenciones a la tabla de planilla
ALTER TABLE Planilla ADD COLUMN retenciones DOUBLE DEFAULT 0;

-- Tabla nueva HAY CAMBIOS
CREATE TABLE Historial_Cargos (
    id_historial INT PRIMARY KEY AUTO_INCREMENT,
    id_usuario INT,
    -- puesto_anterior VARCHAR(255),
    nuevo_puesto VARCHAR(255),
    fecha_cambio DATE,
    motivo VARCHAR(255),
    fechacreacion DATE,
    usuariocreacion VARCHAR(255),
    -- sueldo_anterior DECIMAL(10,2),
    sueldo_nuevo DECIMAL(10,2),
    CONSTRAINT fk_historial_cargos_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario)
);

//Nueva tabla para registrar el historial de cambios de salarios
CREATE TABLE Historial_Salarios (
  id_historial_salarios INT PRIMARY KEY AUTO_INCREMENT,
  id_usuario INT,
  -- salario_anterior DOUBLE,
  nuevo_salario_base DOUBLE,
  ajuste DOUBLE,
  nuevo_salario_neto DOUBLE,
  fecha_cambio DATE,
  fechacreacion DATE,
  usuariocreacion VARCHAR(255),
  fechamodificacion DATE,
  usuariomodificacion VARCHAR(255),
  CONSTRAINT fk_historial_salarios_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario)
);

// Nueva modificacion
ALTER TABLE USUARIO MODIFY password VARCHAR(255);

-- Nueva modificacion
ALTER TABLE Usuario ADD COLUMN direccion_domicilio VARCHAR(500); 

--cambios de dias feriados de Maria
--agregar una columna doble pago
ALTER TABLE Dias_Feriados ADD COLUMN doble_pago BOOLEAN DEFAULT FALSE;
--modificar la columna de doble pago
ALTER TABLE Dias_Feriados MODIFY COLUMN doble_pago INT(1) NOT NULL DEFAULT 0;
--otra modificacion
UPDATE Dias_Feriados SET doble_pago = 0 WHERE doble_pago IS NULL;

-- Cambios de Leonardo
------------------ NUEVOS CAMBIOS --------------------------------

-- ELIMINAR TABLA DE HISTORIAL DE CARGOS
DROP TABLE Historial_Cargos;

-- CREAR TABLA DE HISTORIAL DE CARGOS CON NUEVOS CAMBIOS
CREATE TABLE Historial_Cargos (
    id_historial_cargos INT PRIMARY KEY AUTO_INCREMENT,
    id_usuario INT,
    nuevo_puesto VARCHAR(255),  -- No tendria que agarrar el atributo de puesto de la tabla de usuario?
    fecha_cambio DATE,
    motivo VARCHAR(255),
    sueldo_nuevo DECIMAL(10,2),  -- No tendria que agarrar el atributo de salario base de la tabla de planilla?
    fechacreacion DATE,
    usuariocreacion VARCHAR(255),
    fechamodificacion DATE,
    usuariomodificacion VARCHAR(255),
    CONSTRAINT fk_historial_cargos_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario)
);

-- ELIMINAR TABLA DE HISTORIAL DE SALARIOS
DROP TABLE Historial_Salarios;

-- CREAR TABLA DE HISTORIAL DE SALARIOS CON NUEVOS CAMBIOS
CREATE TABLE Historial_Salarios (
  id_historial_salarios INT PRIMARY KEY AUTO_INCREMENT,
  id_usuario INT,
  nuevo_salario_base DOUBLE, -- No tendria que agarrar el atributo de salario base de la tabla de planilla?
  ajuste DOUBLE,
  nuevo_salario_neto DOUBLE, -- No tendria que agarrar el atributo de salario neto de la tabla de planilla?
  fecha_cambio DATE,
  fechacreacion DATE,
  usuariocreacion VARCHAR(255),
  fechamodificacion DATE,
  usuariomodificacion VARCHAR(255),
  CONSTRAINT fk_historial_salarios_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario)
);

-- Crear tabla Estado
CREATE TABLE Estado_Vacacion (
    id_estado_vacacion INT PRIMARY KEY AUTO_INCREMENT,
    descripcion VARCHAR(255)
);

-- MODIFICACIONES EN LA TABLA DE VACACION   

-- ELIMINAR LAS RESTRICCIONES DE LA CLAVE FORANEA ANTES DE ELIMINAR LAS COLUMNAS
ALTER TABLE vacacion DROP FOREIGN KEY fk_vacacion_departamento;
ALTER TABLE vacacion DROP FOREIGN KEY fk_vacacion_estado;

-- ELIMINAR COLUMNA DE DEPARTAMENTO Y DE ESTADO DE LA TABLA DE VACACION
ALTER TABLE vacacion DROP COLUMN id_departamento;
ALTER TABLE vacacion DROP COLUMN id_estado;

-- AGREGAR COLUMNA DE ESTADO DE VACACION A LA TABLA DE VACACION
ALTER TABLE vacacion ADD id_estado_vacacion INT;
ALTER TABLE vacacion ADD CONSTRAINT fk_vacacion_estado_vacacion FOREIGN KEY (id_estado_vacacion) REFERENCES Estado_Vacacion(id_estado_vacacion);

-- CREAR TABLA PARA EL REPORTE DE LA CCSS

CREATE TABLE Reporte_Caja (
    id_reporte_caja INT PRIMARY KEY AUTO_INCREMENT,
    id_usuario INT,
    cedula_caja INT,
    salario_colones DOUBLE,
    fecha_generacion DATE,
    link_archivo VARCHAR(2255),
    CONSTRAINT fk_reporte_caja_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario)
);

-- CREAR TABLA PARA EL REPORTE DEL BAC

CREATE TABLE Reporte_Bac (
    id_reporte_bac INT PRIMARY KEY AUTO_INCREMENT,
    id_usuario INT,
    cedula_bac DOUBLE,
    salario_neto DOUBLE,
    fecha_generacion DATE,
    link_archivo VARCHAR(2255),
    CONSTRAINT fk_reporte_bac_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario)
);

-- CREAR TABLA PARA EL REPORTE DEL INS

CREATE TABLE Reporte_INS (
    id_reporte_ins INT PRIMARY KEY AUTO_INCREMENT,
    id_usuario INT,
    id_nacionalidad VARCHAR(255),
    salario_neto DOUBLE,
    dias_trabajados int,
    horas_trabajadas int,
    observaciones VARCHAR(2255),
    puesto VARCHAR(100),
    fecha_generacion DATE,
    link_archivo VARCHAR(2255),
    CONSTRAINT fk_reporte_INS_usuario FOREIGN KEY (id_usuario) REFERENCES Usuario(id_usuario)
);

-- AGREGAR ATRIBUTO DE DIAS RESTANTES EN LA TABLA DE VACACION
ALTER TABLE Historial_vacaciones ADD COLUMN DiasRestantes INT;

-- Cambios Maria
-- insertar en departamento
INSERT INTO departamento (nombre, descripcion, usuariocreacion, usuariomodificacion) VALUES 
('Recursos Humanos', 'Gestiona la contrataciÃ³n, formaciÃ³n y bienestar de los empleados.', 'admin', 'admin'),
('TI', 'Desarrolla y mantiene sistemas tecnolÃ³gicos y de informaciÃ³n.', 'admin', 'admin'),
('Finanzas', 'Gestiona los recursos econÃ³micos y financieros de la empresa.', 'admin', 'admin'),
('IngenierÃ­a', 'DiseÃ±a y supervisa proyectos de infraestructura y tecnologÃ­a.', 'admin', 'admin'),
('Salud', 'Proporciona servicios mÃ©dicos y de salud.', 'admin', 'admin'),
('EducaciÃ³n', 'Encargado de la formaciÃ³n y capacitaciÃ³n del personal.', 'admin', 'admin'),
('AdministraciÃ³n', 'Coordina las actividades operativas y organizativas de la empresa.', 'admin', 'admin'),
('Legal', 'AsesorÃ­a legal y cumplimiento normativo.', 'admin', 'admin'),
('Ventas', 'Encargado de las actividades comerciales y ventas de la empresa.', 'admin', 'admin'),
('Marketing', 'Desarrolla estrategias de publicidad y promociÃ³n.', 'admin', 'admin');



-- crear tabla ocupaciones
CREATE TABLE ocupaciones (
    id_ocupacion INT AUTO_INCREMENT PRIMARY KEY,
    nombre_ocupacion VARCHAR(255) NOT NULL,
    codigo INT NOT NULL,
    id_departamento INT NOT NULL,
    CONSTRAINT fk_departamento FOREIGN KEY (id_departamento) REFERENCES departamento(id_departamento)
);

-- datos de ocupaciones
-- Recursos Humanos (id_departamento = 1)
INSERT INTO ocupaciones (nombre_ocupacion, codigo, id_departamento) VALUES 
('Director de Recursos Humanos', 1212, 1),
('Especialista en Reclutamiento', 2423, 1),
('Analista de Recursos Humanos', 2424, 1);

-- TI (TecnologÃ­a de la InformaciÃ³n) (id_departamento = 2)
INSERT INTO ocupaciones (nombre_ocupacion, codigo, id_departamento) VALUES 
('Desarrollador de Software', 2512, 2),
('Administrador de Sistemas', 2522, 2),
('Ingeniero de Redes', 2523, 2),
('Especialista en Ciberseguridad', 2529, 2),
('Analista de Datos', 2511, 2);

-- Finanzas (id_departamento = 3)
INSERT INTO ocupaciones (nombre_ocupacion, codigo, id_departamento) VALUES 
('Contador', 2411, 3),
('Analista Financiero', 2413, 3),
('Auditor', 2412, 3),
('Asesor de Inversiones', 2414, 3);

-- IngenierÃ­a (id_departamento = 4)
INSERT INTO ocupaciones (nombre_ocupacion, codigo, id_departamento) VALUES 
('Ingeniero Civil', 2142, 4),
('Ingeniero MecÃ¡nico', 2144, 4),
('Ingeniero Industrial', 2141, 4),
('Ingeniero en Telecomunicaciones', 2153, 4),
('Ingeniero QuÃ­mico', 2145, 4);

-- Salud (id_departamento = 5)
INSERT INTO ocupaciones (nombre_ocupacion, codigo, id_departamento) VALUES 
('MÃ©dico General', 2211, 5),
('Enfermero Profesional', 2220, 5),
('PsicÃ³logo', 2634, 5),
('Fisioterapeuta', 2264, 5);

-- EducaciÃ³n (id_departamento = 6)
INSERT INTO ocupaciones (nombre_ocupacion, codigo, id_departamento) VALUES 
('Profesor de EducaciÃ³n Primaria', 2341, 6),
('Profesor de EducaciÃ³n Secundaria', 2330, 6),
('Profesor Universitario', 2310, 6);

-- AdministraciÃ³n (id_departamento = 7)
INSERT INTO ocupaciones (nombre_ocupacion, codigo, id_departamento) VALUES 
('Administrador de Empresas', 1211, 7),
('Gerente de Operaciones', 1120, 7),
('Asistente Administrativo', 4110, 7);

-- Legal (id_departamento = 8)
INSERT INTO ocupaciones (nombre_ocupacion, codigo, id_departamento) VALUES 
('Abogado', 2611, 8),
('Asesor Legal', 2619, 8),
('Notario', 2612, 8);

-- Ventas (id_departamento = 9)
INSERT INTO ocupaciones (nombre_ocupacion, codigo, id_departamento) VALUES 
('Vendedor', 5221, 9),
('Ejecutivo de Ventas', 5222, 9),
('Representante Comercial', 3322, 9);

-- Marketing (id_departamento = 10)
INSERT INTO ocupaciones (nombre_ocupacion, codigo, id_departamento) VALUES 
('Especialista en Marketing', 2431, 10),
('Community Manager', 2432, 10),
('DiseÃ±ador GrÃ¡fico', 2166, 10);


-- crear tabla de nacionalidades
CREATE TABLE nacionalidades (
    id_nacionalidad INT AUTO_INCREMENT PRIMARY KEY,
    pais VARCHAR(100) NOT NULL,
    codigo_iso VARCHAR(3) NOT NULL UNIQUE
);
-- datos de nacionalidades
INSERT INTO nacionalidades (pais, codigo_iso) VALUES 
('AfganistÃ¡n', 'AF'), ('Albania', 'AL'), ('Alemania', 'DE'), ('Andorra', 'AD'),
('Angola', 'AO'), ('Argentina', 'AR'), ('Australia', 'AU'), ('Austria', 'AT'),
('Brasil', 'BR'), ('CanadÃ¡', 'CA'), ('Chile', 'CL'), ('China', 'CN'),
('Colombia', 'CO'), ('Costa Rica', 'CR'), ('Cuba', 'CU'), ('Ecuador', 'EC'),
('Egipto', 'EG'), ('El Salvador', 'SV'), ('EspaÃ±a', 'ES'), ('Estados Unidos', 'US'),
('Francia', 'FR'), ('Italia', 'IT'), ('MÃ©xico', 'MX'), ('PanamÃ¡', 'PA'),
('Paraguay', 'PY'), ('PerÃº', 'PE'), ('Portugal', 'PT'), ('Reino Unido', 'GB'),
('Rusia', 'RU'), ('Suecia', 'SE'), ('Suiza', 'CH'), ('Uruguay', 'UY'),
('Venezuela', 'VE'), ('Vietnam', 'VN'), ('Zimbabue', 'ZW');

-- modificaciÃ³n en la tabla usuario
ALTER TABLE usuario ADD COLUMN id_ocupacion INT;
ALTER TABLE usuario ADD COLUMN id_nacionalidad INT;

ALTER TABLE usuario ADD CONSTRAINT fk_usuario_ocupacion 
FOREIGN KEY (id_ocupacion) REFERENCES ocupaciones(id_ocupacion);

ALTER TABLE usuario ADD CONSTRAINT fk_usuario_nacionalidad 
FOREIGN KEY (id_nacionalidad) REFERENCES nacionalidades(id_nacionalidad);

--  borrar la tabla cargo
ALTER TABLE usuario DROP COLUMN cargo;

--cambios maria
CREATE TABLE reporte_ins (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_usuario INT,
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    fecha_nacimiento DATE NOT NULL,
    telefono VARCHAR(15) NOT NULL,
    correo VARCHAR(150) NOT NULL,
    sexo ENUM('Masculino','Femenino','Otro') NOT NULL,
    estado_civil ENUM('Soltero','Casado','Divorciado','Viudo') NOT NULL,
    nacionalidad VARCHAR(50) NOT NULL,
    jornada ENUM('Completa','Medio tiempo','Por horas') NOT NULL,
    dias INT NOT NULL,
    hrs INT NOT NULL,
    salario DECIMAL(10,2) NOT NULL,
    observacion TEXT NULL,
    ocupacion VARCHAR(100) NOT NULL,
    descripcion_ocupacion TEXT NULL,
    direccion_domicilio VARCHAR(255) NULL,
    salario_base DOUBLE NULL,
    salario_neto DOUBLE NULL,
    tipo_quincena VARCHAR(255) NULL,
    mes VARCHAR(10) NULL,
    anio INT NULL,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
INSERT INTO reporte_ins (
    id_usuario, nombre, apellido, fecha_nacimiento, telefono, correo, sexo, estado_civil, 
    nacionalidad, jornada, dias, hrs, salario, observacion, ocupacion, descripcion_ocupacion, 
    direccion_domicilio, salario_base, salario_neto, tipo_quincena, mes, anio
)



SELECT 
    u.id_usuario, 
    u.nombre, 
    u.apellido, 
    u.fecha_nacimiento, 
    u.numero_telefonico, 
    u.correo_electronico, 
    u.sexo, 
    u.estado_civil, 
    n.pais,  
    COALESCE(p.jornada, 'No definida'),  
    p.dias,  
    p.hrs,  
    p.jornada,
    p.salario_base, 
    p.observacion,  
    o.nombre_ocupacion,  
    o.descripcion,  
    u.direccion_domicilio,  
    p.salario_base, 
    p.salario_neto, 
    p.tipo_quincena, 
    p.mes, 
    p.anio
FROM usuario u
LEFT JOIN planilla p ON u.id_usuario = p.id_usuario
LEFT JOIN nacionalidades n ON u.id_nacionalidad = n.id_nacionalidad
LEFT JOIN ocupaciones o ON u.id_ocupacion = o.id_ocupacion;


ALTER TABLE planilla ADD COLUMN jornada VARCHAR(50);


UPDATE planilla 
SET jornada = 'Completa' 
WHERE tipo_quincena = 'Mensual';

UPDATE planilla 
SET jornada = 'Medio Tiempo' 
WHERE tipo_quincena = 'Quincenal';

UPDATE planilla 
SET jornada = 'Por Horas' 
WHERE tipo_quincena = 'Semanal';


UPDATE ocupaciones 
SET descripcion = 'GestiÃ³n del talento humano'
WHERE nombre_ocupacion = 'Director de Recursos Humanos';

UPDATE ocupaciones 
SET descripcion = 'SelecciÃ³n y contrataciÃ³n de personal'
WHERE nombre_ocupacion = 'Especialista en Reclutamiento';

UPDATE ocupaciones 
SET descripcion = 'OptimizaciÃ³n de procesos de RRHH'
WHERE nombre_ocupacion = 'Analista de Recursos Humanos';

UPDATE ocupaciones 
SET descripcion = 'Desarrollo y mantenimiento de software'
WHERE nombre_ocupacion = 'Desarrollador de Software';



